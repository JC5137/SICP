(define (derive exp var)
    (cond ( (number? exp) 0)
          ((variable? exp)
          (if (same-variable? exp var) 1 0))
          ((sum? exp)
           (make-sum (derive (addend exp) var)
                     (derive (augend exp) var)))
          ((product? exp)
           (make-sum 
            (make-product (multiplier exp)
                          (derive (multiplicand exp) var))
            (make-product (derive (multiplier exp) var)
                          (multiplicand exp))))
         (else
            (error "unknow!"))))

(define (variable? x) (symble? x))
(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v1) (eq? v1 v2)))
(define (make-sum a1,a2) (list '+ a1 a2))
(define (make-product m1,m2) (list '* m1 m2))
